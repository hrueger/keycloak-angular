{"version":3,"file":"keycloak-angular.mjs","sources":["../../../projects/keycloak-angular/src/lib/core/interfaces/keycloak-event.ts","../../../projects/keycloak-angular/src/lib/core/services/keycloak-auth-guard.ts","../../../projects/keycloak-angular/src/lib/core/services/keycloak.service.ts","../../../projects/keycloak-angular/src/lib/core/interceptors/keycloak-bearer.interceptor.ts","../../../projects/keycloak-angular/src/lib/core/core.module.ts","../../../projects/keycloak-angular/src/lib/keycloak-angular.module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Mauricio Gemelli Vigolo and contributors.\r\n *\r\n * Use of this source code is governed by a MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/master/LICENSE.md\r\n */\r\n\r\n/**\r\n * Keycloak event types, as described at the keycloak-js documentation:\r\n * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events\r\n */\r\nexport enum KeycloakEventType {\r\n  /**\r\n   * Called if there was an error during authentication.\r\n   */\r\n  OnAuthError,\r\n  /**\r\n   * Called if the user is logged out\r\n   * (will only be called if the session status iframe is enabled, or in Cordova mode).\r\n   */\r\n  OnAuthLogout,\r\n  /**\r\n   * Called if there was an error while trying to refresh the token.\r\n   */\r\n  OnAuthRefreshError,\r\n  /**\r\n   * Called when the token is refreshed.\r\n   */\r\n  OnAuthRefreshSuccess,\r\n  /**\r\n   * Called when a user is successfully authenticated.\r\n   */\r\n  OnAuthSuccess,\r\n  /**\r\n   * Called when the adapter is initialized.\r\n   */\r\n  OnReady,\r\n  /**\r\n   * Called when the access token is expired. If a refresh token is available the token\r\n   * can be refreshed with updateToken, or in cases where it is not (that is, with implicit flow)\r\n   * you can redirect to login screen to obtain a new access token.\r\n   */\r\n  OnTokenExpired,\r\n  /**\r\n   * Called when a AIA has been requested by the application.\r\n   */\r\n  OnActionUpdate\r\n}\r\n\r\n/**\r\n * Structure of an event triggered by Keycloak, contains it's type\r\n * and arguments (if any).\r\n */\r\nexport interface KeycloakEvent {\r\n  /**\r\n   * Event type as described at {@link KeycloakEventType}.\r\n   */\r\n  type: KeycloakEventType;\r\n  /**\r\n   * Arguments from the keycloak-js event function.\r\n   */\r\n  args?: unknown;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Mauricio Gemelli Vigolo and contributors.\r\n *\r\n * Use of this source code is governed by a MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/master/LICENSE.md\r\n */\r\n\r\nimport {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  UrlTree\r\n} from '@angular/router';\r\n\r\nimport { KeycloakService } from './keycloak.service';\r\n\r\n/**\r\n * A simple guard implementation out of the box. This class should be inherited and\r\n * implemented by the application. The only method that should be implemented is #isAccessAllowed.\r\n * The reason for this is that the authorization flow is usually not unique, so in this way you will\r\n * have more freedom to customize your authorization flow.\r\n */\r\nexport abstract class KeycloakAuthGuard implements CanActivate {\r\n  /**\r\n   * Indicates if the user is authenticated or not.\r\n   */\r\n  protected authenticated: boolean;\r\n  /**\r\n   * Roles of the logged user. It contains the clientId and realm user roles.\r\n   */\r\n  protected roles: string[];\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected keycloakAngular: KeycloakService\r\n  ) {}\r\n\r\n  /**\r\n   * CanActivate checks if the user is logged in and get the full list of roles (REALM + CLIENT)\r\n   * of the logged user. This values are set to authenticated and roles params.\r\n   *\r\n   * @param route\r\n   * @param state\r\n   */\r\n  async canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Promise<boolean | UrlTree> {\r\n    try {\r\n      this.authenticated = await this.keycloakAngular.isLoggedIn();\r\n      this.roles = await this.keycloakAngular.getUserRoles(true);\r\n\r\n      return await this.isAccessAllowed(route, state);\r\n    } catch (error) {\r\n      throw new Error(\r\n        'An error happened during access validation. Details:' + error\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create your own customized authorization flow in this method. From here you already known\r\n   * if the user is authenticated (this.authenticated) and the user roles (this.roles).\r\n   *\r\n   * Return a UrlTree if the user should be redirected to another route.\r\n   *\r\n   * @param route\r\n   * @param state\r\n   */\r\n  abstract isAccessAllowed(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Promise<boolean | UrlTree>;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Mauricio Gemelli Vigolo and contributors.\r\n *\r\n * Use of this source code is governed by a MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/master/LICENSE.md\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpRequest } from '@angular/common/http';\r\n\r\nimport { Subject, from } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport Keycloak from 'keycloak-js';\r\n\r\nimport {\r\n  ExcludedUrl,\r\n  ExcludedUrlRegex,\r\n  KeycloakOptions\r\n} from '../interfaces/keycloak-options';\r\nimport { KeycloakEvent, KeycloakEventType } from '../interfaces/keycloak-event';\r\n\r\n/**\r\n * Service to expose existent methods from the Keycloak JS adapter, adding new\r\n * functionalities to improve the use of keycloak in Angular v > 4.3 applications.\r\n *\r\n * This class should be injected in the application bootstrap, so the same instance will be used\r\n * along the web application.\r\n */\r\n@Injectable()\r\nexport class KeycloakService {\r\n  /**\r\n   * Keycloak-js instance.\r\n   */\r\n  private _instance: Keycloak.KeycloakInstance;\r\n  /**\r\n   * User profile as KeycloakProfile interface.\r\n   */\r\n  private _userProfile: Keycloak.KeycloakProfile;\r\n  /**\r\n   * Flag to indicate if the bearer will not be added to the authorization header.\r\n   */\r\n  private _enableBearerInterceptor: boolean;\r\n  /**\r\n   * When the implicit flow is choosen there must exist a silentRefresh, as there is\r\n   * no refresh token.\r\n   */\r\n  private _silentRefresh: boolean;\r\n  /**\r\n   * Indicates that the user profile should be loaded at the keycloak initialization,\r\n   * just after the login.\r\n   */\r\n  private _loadUserProfileAtStartUp: boolean;\r\n  /**\r\n   * The bearer prefix that will be appended to the Authorization Header.\r\n   */\r\n  private _bearerPrefix: string;\r\n  /**\r\n   * Value that will be used as the Authorization Http Header name.\r\n   */\r\n  private _authorizationHeaderName: string;\r\n  /**\r\n   * @deprecated\r\n   * The excluded urls patterns that must skip the KeycloakBearerInterceptor.\r\n   */\r\n  private _excludedUrls: ExcludedUrlRegex[];\r\n  /**\r\n   * Observer for the keycloak events\r\n   */\r\n  private _keycloakEvents$: Subject<KeycloakEvent> =\r\n    new Subject<KeycloakEvent>();\r\n  /**\r\n   * The amount of required time remaining before expiry of the token before the token will be refreshed.\r\n   */\r\n  private _updateMinValidity: number;\r\n  /**\r\n   * Returns true if the request should have the token added to the headers by the KeycloakBearerInterceptor.\r\n   */\r\n  shouldAddToken: (request: HttpRequest<unknown>) => boolean;\r\n  /**\r\n   * Returns true if the request being made should potentially update the token.\r\n   */\r\n  shouldUpdateToken: (request: HttpRequest<unknown>) => boolean;\r\n\r\n  /**\r\n   * Binds the keycloak-js events to the keycloakEvents Subject\r\n   * which is a good way to monitor for changes, if needed.\r\n   *\r\n   * The keycloakEvents returns the keycloak-js event type and any\r\n   * argument if the source function provides any.\r\n   */\r\n  private bindsKeycloakEvents(): void {\r\n    this._instance.onAuthError = (errorData) => {\r\n      this._keycloakEvents$.next({\r\n        args: errorData,\r\n        type: KeycloakEventType.OnAuthError\r\n      });\r\n    };\r\n\r\n    this._instance.onAuthLogout = () => {\r\n      this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthLogout });\r\n    };\r\n\r\n    this._instance.onAuthRefreshSuccess = () => {\r\n      this._keycloakEvents$.next({\r\n        type: KeycloakEventType.OnAuthRefreshSuccess\r\n      });\r\n    };\r\n\r\n    this._instance.onAuthRefreshError = () => {\r\n      this._keycloakEvents$.next({\r\n        type: KeycloakEventType.OnAuthRefreshError\r\n      });\r\n    };\r\n\r\n    this._instance.onAuthSuccess = () => {\r\n      this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthSuccess });\r\n    };\r\n\r\n    this._instance.onTokenExpired = () => {\r\n      this._keycloakEvents$.next({\r\n        type: KeycloakEventType.OnTokenExpired\r\n      });\r\n    };\r\n\r\n    this._instance.onActionUpdate = (state) => {\r\n      this._keycloakEvents$.next({\r\n        args: state,\r\n        type: KeycloakEventType.OnActionUpdate\r\n      });\r\n    };\r\n\r\n    this._instance.onReady = (authenticated) => {\r\n      this._keycloakEvents$.next({\r\n        args: authenticated,\r\n        type: KeycloakEventType.OnReady\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Loads all bearerExcludedUrl content in a uniform type: ExcludedUrl,\r\n   * so it becomes easier to handle.\r\n   *\r\n   * @param bearerExcludedUrls array of strings or ExcludedUrl that includes\r\n   * the url and HttpMethod.\r\n   */\r\n  private loadExcludedUrls(\r\n    bearerExcludedUrls: (string | ExcludedUrl)[]\r\n  ): ExcludedUrlRegex[] {\r\n    const excludedUrls: ExcludedUrlRegex[] = [];\r\n    for (const item of bearerExcludedUrls) {\r\n      let excludedUrl: ExcludedUrlRegex;\r\n      if (typeof item === 'string') {\r\n        excludedUrl = { urlPattern: new RegExp(item, 'i'), httpMethods: [] };\r\n      } else {\r\n        excludedUrl = {\r\n          urlPattern: new RegExp(item.url, 'i'),\r\n          httpMethods: item.httpMethods\r\n        };\r\n      }\r\n      excludedUrls.push(excludedUrl);\r\n    }\r\n    return excludedUrls;\r\n  }\r\n\r\n  /**\r\n   * Handles the class values initialization.\r\n   *\r\n   * @param options\r\n   */\r\n  private initServiceValues({\r\n    enableBearerInterceptor = true,\r\n    loadUserProfileAtStartUp = false,\r\n    bearerExcludedUrls = [],\r\n    authorizationHeaderName = 'Authorization',\r\n    bearerPrefix = 'Bearer',\r\n    initOptions,\r\n    updateMinValidity = 20,\r\n    shouldAddToken = () => true,\r\n    shouldUpdateToken = () => true\r\n  }: KeycloakOptions): void {\r\n    this._enableBearerInterceptor = enableBearerInterceptor;\r\n    this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;\r\n    this._authorizationHeaderName = authorizationHeaderName;\r\n    this._bearerPrefix = bearerPrefix.trim().concat(' ');\r\n    this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);\r\n    this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;\r\n    this._updateMinValidity = updateMinValidity;\r\n    this.shouldAddToken = shouldAddToken;\r\n    this.shouldUpdateToken = shouldUpdateToken;\r\n  }\r\n\r\n  /**\r\n   * Keycloak initialization. It should be called to initialize the adapter.\r\n   * Options is a object with 2 main parameters: config and initOptions. The first one\r\n   * will be used to create the Keycloak instance. The second one are options to initialize the\r\n   * keycloak instance.\r\n   *\r\n   * @param options\r\n   * Config: may be a string representing the keycloak URI or an object with the\r\n   * following content:\r\n   * - url: Keycloak json URL\r\n   * - realm: realm name\r\n   * - clientId: client id\r\n   *\r\n   * initOptions:\r\n   * Options to initialize the Keycloak adapter, matches the options as provided by Keycloak itself.\r\n   *\r\n   * enableBearerInterceptor:\r\n   * Flag to indicate if the bearer will added to the authorization header.\r\n   *\r\n   * loadUserProfileInStartUp:\r\n   * Indicates that the user profile should be loaded at the keycloak initialization,\r\n   * just after the login.\r\n   *\r\n   * bearerExcludedUrls:\r\n   * String Array to exclude the urls that should not have the Authorization Header automatically\r\n   * added.\r\n   *\r\n   * authorizationHeaderName:\r\n   * This value will be used as the Authorization Http Header name.\r\n   *\r\n   * bearerPrefix:\r\n   * This value will be included in the Authorization Http Header param.\r\n   *\r\n   * tokenUpdateExcludedHeaders:\r\n   * Array of Http Header key/value maps that should not trigger the token to be updated.\r\n   *\r\n   * updateMinValidity:\r\n   * This value determines if the token will be refreshed based on its expiration time.\r\n   *\r\n   * @returns\r\n   * A Promise with a boolean indicating if the initialization was successful.\r\n   */\r\n  public async init(options: KeycloakOptions = {}) {\r\n    this.initServiceValues(options);\r\n    const { config, initOptions } = options;\r\n\r\n    this._instance = Keycloak(config);\r\n    this.bindsKeycloakEvents();\r\n\r\n    const authenticated = await this._instance.init(initOptions);\r\n\r\n    if (authenticated && this._loadUserProfileAtStartUp) {\r\n      await this.loadUserProfile();\r\n    }\r\n\r\n    return authenticated;\r\n  }\r\n\r\n  /**\r\n   * Redirects to login form on (options is an optional object with redirectUri and/or\r\n   * prompt fields).\r\n   *\r\n   * @param options\r\n   * Object, where:\r\n   *  - redirectUri: Specifies the uri to redirect to after login.\r\n   *  - prompt:By default the login screen is displayed if the user is not logged-in to Keycloak.\r\n   * To only authenticate to the application if the user is already logged-in and not display the\r\n   * login page if the user is not logged-in, set this option to none. To always require\r\n   * re-authentication and ignore SSO, set this option to login .\r\n   *  - maxAge: Used just if user is already authenticated. Specifies maximum time since the\r\n   * authentication of user happened. If user is already authenticated for longer time than\r\n   * maxAge, the SSO is ignored and he will need to re-authenticate again.\r\n   *  - loginHint: Used to pre-fill the username/email field on the login form.\r\n   *  - action: If value is 'register' then user is redirected to registration page, otherwise to\r\n   * login page.\r\n   *  - locale: Specifies the desired locale for the UI.\r\n   * @returns\r\n   * A void Promise if the login is successful and after the user profile loading.\r\n   */\r\n  public async login(options: Keycloak.KeycloakLoginOptions = {}) {\r\n    await this._instance.login(options);\r\n\r\n    if (this._loadUserProfileAtStartUp) {\r\n      await this.loadUserProfile();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redirects to logout.\r\n   *\r\n   * @param redirectUri\r\n   * Specifies the uri to redirect to after logout.\r\n   * @returns\r\n   * A void Promise if the logout was successful, cleaning also the userProfile.\r\n   */\r\n  public async logout(redirectUri?: string) {\r\n    const options = {\r\n      redirectUri\r\n    };\r\n\r\n    await this._instance.logout(options);\r\n    this._userProfile = undefined;\r\n  }\r\n\r\n  /**\r\n   * Redirects to registration form. Shortcut for login with option\r\n   * action = 'register'. Options are same as for the login method but 'action' is set to\r\n   * 'register'.\r\n   *\r\n   * @param options\r\n   * login options\r\n   * @returns\r\n   * A void Promise if the register flow was successful.\r\n   */\r\n  public async register(\r\n    options: Keycloak.KeycloakLoginOptions = { action: 'register' }\r\n  ) {\r\n    await this._instance.register(options);\r\n  }\r\n\r\n  /**\r\n   * Check if the user has access to the specified role. It will look for roles in\r\n   * realm and clientId, but will not check if the user is logged in for better performance.\r\n   *\r\n   * @param role\r\n   * role name\r\n   * @param resource\r\n   * resource name If not specified, `clientId` is used\r\n   * @returns\r\n   * A boolean meaning if the user has the specified Role.\r\n   */\r\n  isUserInRole(role: string, resource?: string): boolean {\r\n    let hasRole: boolean;\r\n    hasRole = this._instance.hasResourceRole(role, resource);\r\n    if (!hasRole) {\r\n      hasRole = this._instance.hasRealmRole(role);\r\n    }\r\n    return hasRole;\r\n  }\r\n\r\n  /**\r\n   * Return the roles of the logged user. The allRoles parameter, with default value\r\n   * true, will return the clientId and realm roles associated with the logged user. If set to false\r\n   * it will only return the user roles associated with the clientId.\r\n   *\r\n   * @param allRoles\r\n   * Flag to set if all roles should be returned.(Optional: default value is true)\r\n   * @returns\r\n   * Array of Roles associated with the logged user.\r\n   */\r\n  getUserRoles(allRoles: boolean = true): string[] {\r\n    let roles: string[] = [];\r\n    if (this._instance.resourceAccess) {\r\n      for (const key in this._instance.resourceAccess) {\r\n        if (this._instance.resourceAccess.hasOwnProperty(key)) {\r\n          const resourceAccess = this._instance.resourceAccess[key];\r\n          const clientRoles = resourceAccess['roles'] || [];\r\n          roles = roles.concat(clientRoles);\r\n        }\r\n      }\r\n    }\r\n    if (allRoles && this._instance.realmAccess) {\r\n      const realmRoles = this._instance.realmAccess['roles'] || [];\r\n      roles.push(...realmRoles);\r\n    }\r\n    return roles;\r\n  }\r\n\r\n  /**\r\n   * Check if user is logged in.\r\n   *\r\n   * @returns\r\n   * A boolean that indicates if the user is logged in.\r\n   */\r\n  async isLoggedIn(): Promise<boolean> {\r\n    return await this._instance.authenticated;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token has less than minValidity seconds left before\r\n   * it expires.\r\n   *\r\n   * @param minValidity\r\n   * Seconds left. (minValidity) is optional. Default value is 0.\r\n   * @returns\r\n   * Boolean indicating if the token is expired.\r\n   */\r\n  isTokenExpired(minValidity: number = 0): boolean {\r\n    return this._instance.isTokenExpired(minValidity);\r\n  }\r\n\r\n  /**\r\n   * If the token expires within _updateMinValidity seconds the token is refreshed. If the\r\n   * session status iframe is enabled, the session status is also checked.\r\n   * Returns a promise telling if the token was refreshed or not. If the session is not active\r\n   * anymore, the promise is rejected.\r\n   *\r\n   * @param minValidity\r\n   * Seconds left. (minValidity is optional, if not specified updateMinValidity - default 20 is used)\r\n   * @returns\r\n   * Promise with a boolean indicating if the token was succesfully updated.\r\n   */\r\n  public async updateToken(minValidity = this._updateMinValidity) {\r\n    try {\r\n      // TODO: this is a workaround until the silent refresh (issue #43)\r\n      // is not implemented, avoiding the redirect loop.\r\n      if (this._silentRefresh) {\r\n        if (this.isTokenExpired()) {\r\n          throw new Error(\r\n            'Failed to refresh the token, or the session is expired'\r\n          );\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      if (!this._instance) {\r\n        throw new Error('Keycloak Angular library is not initialized.');\r\n      }\r\n\r\n      return await this._instance.updateToken(minValidity);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads the user profile.\r\n   * Returns promise to set functions to be invoked if the profile was loaded\r\n   * successfully, or if the profile could not be loaded.\r\n   *\r\n   * @param forceReload\r\n   * If true will force the loadUserProfile even if its already loaded.\r\n   * @returns\r\n   * A promise with the KeycloakProfile data loaded.\r\n   */\r\n  public async loadUserProfile(forceReload = false) {\r\n    if (this._userProfile && !forceReload) {\r\n      return this._userProfile;\r\n    }\r\n\r\n    if (!this._instance.authenticated) {\r\n      throw new Error(\r\n        'The user profile was not loaded as the user is not logged in.'\r\n      );\r\n    }\r\n\r\n    return (this._userProfile = await this._instance.loadUserProfile());\r\n  }\r\n\r\n  /**\r\n   * Returns the authenticated token, calling updateToken to get a refreshed one if necessary.\r\n   */\r\n  public async getToken() {\r\n    return this._instance.token;\r\n  }\r\n\r\n  /**\r\n   * Returns the logged username.\r\n   *\r\n   * @returns\r\n   * The logged username.\r\n   */\r\n  public getUsername() {\r\n    if (!this._userProfile) {\r\n      throw new Error('User not logged in or user profile was not loaded.');\r\n    }\r\n\r\n    return this._userProfile.username;\r\n  }\r\n\r\n  /**\r\n   * Clear authentication state, including tokens. This can be useful if application\r\n   * has detected the session was expired, for example if updating token fails.\r\n   * Invoking this results in onAuthLogout callback listener being invoked.\r\n   */\r\n  clearToken(): void {\r\n    this._instance.clearToken();\r\n  }\r\n\r\n  /**\r\n   * Adds a valid token in header. The key & value format is:\r\n   * Authorization Bearer <token>.\r\n   * If the headers param is undefined it will create the Angular headers object.\r\n   *\r\n   * @param headers\r\n   * Updated header with Authorization and Keycloak token.\r\n   * @returns\r\n   * An observable with with the HTTP Authorization header and the current token.\r\n   */\r\n  public addTokenToHeader(headers: HttpHeaders = new HttpHeaders()) {\r\n    return from(this.getToken()).pipe(\r\n      map((token) =>\r\n        token\r\n          ? headers.set(\r\n              this._authorizationHeaderName,\r\n              this._bearerPrefix + token\r\n            )\r\n          : headers\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the original Keycloak instance, if you need any customization that\r\n   * this Angular service does not support yet. Use with caution.\r\n   *\r\n   * @returns\r\n   * The KeycloakInstance from keycloak-js.\r\n   */\r\n  getKeycloakInstance(): Keycloak.KeycloakInstance {\r\n    return this._instance;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * Returns the excluded URLs that should not be considered by\r\n   * the http interceptor which automatically adds the authorization header in the Http Request.\r\n   *\r\n   * @returns\r\n   * The excluded urls that must not be intercepted by the KeycloakBearerInterceptor.\r\n   */\r\n  get excludedUrls(): ExcludedUrlRegex[] {\r\n    return this._excludedUrls;\r\n  }\r\n\r\n  /**\r\n   * Flag to indicate if the bearer will be added to the authorization header.\r\n   *\r\n   * @returns\r\n   * Returns if the bearer interceptor was set to be disabled.\r\n   */\r\n  get enableBearerInterceptor(): boolean {\r\n    return this._enableBearerInterceptor;\r\n  }\r\n\r\n  /**\r\n   * Keycloak subject to monitor the events triggered by keycloak-js.\r\n   * The following events as available (as described at keycloak docs -\r\n   * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events):\r\n   * - OnAuthError\r\n   * - OnAuthLogout\r\n   * - OnAuthRefreshError\r\n   * - OnAuthRefreshSuccess\r\n   * - OnAuthSuccess\r\n   * - OnReady\r\n   * - OnTokenExpire\r\n   * In each occurrence of any of these, this subject will return the event type,\r\n   * described at {@link KeycloakEventType} enum and the function args from the keycloak-js\r\n   * if provided any.\r\n   *\r\n   * @returns\r\n   * A subject with the {@link KeycloakEvent} which describes the event type and attaches the\r\n   * function args.\r\n   */\r\n  get keycloakEvents$(): Subject<KeycloakEvent> {\r\n    return this._keycloakEvents$;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Mauricio Gemelli Vigolo and contributors.\r\n *\r\n * Use of this source code is governed by a MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/master/LICENSE.md\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\nimport { KeycloakService } from '../services/keycloak.service';\r\nimport { ExcludedUrlRegex } from '../interfaces/keycloak-options';\r\n\r\n/**\r\n * This interceptor includes the bearer by default in all HttpClient requests.\r\n *\r\n * If you need to exclude some URLs from adding the bearer, please, take a look\r\n * at the {@link KeycloakOptions} bearerExcludedUrls property.\r\n */\r\n@Injectable()\r\nexport class KeycloakBearerInterceptor implements HttpInterceptor {\r\n  constructor(private keycloak: KeycloakService) {}\r\n\r\n  /**\r\n   * Calls to update the keycloak token if the request should update the token.\r\n   *\r\n   * @param req http request from @angular http module.\r\n   * @returns\r\n   * A promise boolean for the token update or noop result.\r\n   */\r\n  private async conditionallyUpdateToken(\r\n    req: HttpRequest<unknown>\r\n  ): Promise<boolean> {\r\n    if (this.keycloak.shouldUpdateToken(req)) {\r\n      return await this.keycloak.updateToken();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * Checks if the url is excluded from having the Bearer Authorization\r\n   * header added.\r\n   *\r\n   * @param req http request from @angular http module.\r\n   * @param excludedUrlRegex contains the url pattern and the http methods,\r\n   * excluded from adding the bearer at the Http Request.\r\n   */\r\n  private isUrlExcluded(\r\n    { method, url }: HttpRequest<unknown>,\r\n    { urlPattern, httpMethods }: ExcludedUrlRegex\r\n  ): boolean {\r\n    const httpTest =\r\n      httpMethods.length === 0 ||\r\n      httpMethods.join().indexOf(method.toUpperCase()) > -1;\r\n\r\n    const urlTest = urlPattern.test(url);\r\n\r\n    return httpTest && urlTest;\r\n  }\r\n\r\n  /**\r\n   * Intercept implementation that checks if the request url matches the excludedUrls.\r\n   * If not, adds the Authorization header to the request if the user is logged in.\r\n   *\r\n   * @param req\r\n   * @param next\r\n   */\r\n  public intercept(\r\n    req: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    const { enableBearerInterceptor, excludedUrls } = this.keycloak;\r\n    if (!enableBearerInterceptor) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const shallPass: boolean =\r\n      !this.keycloak.shouldAddToken(req) ||\r\n      excludedUrls.findIndex((item) => this.isUrlExcluded(req, item)) > -1;\r\n    if (shallPass) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    return combineLatest([\r\n      this.conditionallyUpdateToken(req),\r\n      this.keycloak.isLoggedIn()\r\n    ]).pipe(\r\n      mergeMap(([_, isLoggedIn]) =>\r\n        isLoggedIn\r\n          ? this.handleRequestWithTokenHeader(req, next)\r\n          : next.handle(req)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds the token of the current user to the Authorization header\r\n   *\r\n   * @param req\r\n   * @param next\r\n   */\r\n  private handleRequestWithTokenHeader(\r\n    req: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    return this.keycloak.addTokenToHeader(req.headers).pipe(\r\n      mergeMap((headersWithBearer) => {\r\n        const kcReq = req.clone({ headers: headersWithBearer });\r\n        return next.handle(kcReq);\r\n      })\r\n    );\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Mauricio Gemelli Vigolo and contributors.\r\n *\r\n * Use of this source code is governed by a MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/master/LICENSE.md\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { KeycloakService } from './services/keycloak.service';\r\nimport { KeycloakBearerInterceptor } from './interceptors/keycloak-bearer.interceptor';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [\r\n    KeycloakService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: KeycloakBearerInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CoreModule {}\r\n","/**\r\n * @license\r\n * Copyright Mauricio Gemelli Vigolo and contributors.\r\n *\r\n * Use of this source code is governed by a MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/master/LICENSE.md\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CoreModule } from './core/core.module';\r\n\r\n@NgModule({\r\n  imports: [CoreModule]\r\n})\r\nexport class KeycloakAngularModule {}\r\n"],"names":["i1.KeycloakService"],"mappings":"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"}